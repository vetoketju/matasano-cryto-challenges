package com.villevalta.cryptopals.lib.Cryptography;

import com.villevalta.cryptopals.lib.Utils;

import static com.villevalta.cryptopals.lib.Utils.ArrayAppend;

/**
 * Created by ville on 8/25/2014.
 */

public class AES {

    // S-box (This is flipped) http://en.wikipedia.org/wiki/Rijndael_S-box
    private static final byte[] s = {
        (byte)0x63,(byte)0x7C,(byte)0x77,(byte)0x7B,(byte)0xF2,(byte)0x6B,(byte)0x6F,(byte)0xC5,(byte)0x30,(byte)0x01,(byte)0x67,(byte)0x2B,(byte)0xFE,(byte)0xD7,(byte)0xAB,(byte)0x76,
        (byte)0xCA,(byte)0x82,(byte)0xC9,(byte)0x7D,(byte)0xFA,(byte)0x59,(byte)0x47,(byte)0xF0,(byte)0xAD,(byte)0xD4,(byte)0xA2,(byte)0xAF,(byte)0x9C,(byte)0xA4,(byte)0x72,(byte)0xC0,
        (byte)0xB7,(byte)0xFD,(byte)0x93,(byte)0x26,(byte)0x36,(byte)0x3F,(byte)0xF7,(byte)0xCC,(byte)0x34,(byte)0xA5,(byte)0xE5,(byte)0xF1,(byte)0x71,(byte)0xD8,(byte)0x31,(byte)0x15,
        (byte)0x04,(byte)0xC7,(byte)0x23,(byte)0xC3,(byte)0x18,(byte)0x96,(byte)0x05,(byte)0x9A,(byte)0x07,(byte)0x12,(byte)0x80,(byte)0xE2,(byte)0xEB,(byte)0x27,(byte)0xB2,(byte)0x75,
        (byte)0x09,(byte)0x83,(byte)0x2C,(byte)0x1A,(byte)0x1B,(byte)0x6E,(byte)0x5A,(byte)0xA0,(byte)0x52,(byte)0x3B,(byte)0xD6,(byte)0xB3,(byte)0x29,(byte)0xE3,(byte)0x2F,(byte)0x84,
        (byte)0x53,(byte)0xD1,(byte)0x00,(byte)0xED,(byte)0x20,(byte)0xFC,(byte)0xB1,(byte)0x5B,(byte)0x6A,(byte)0xCB,(byte)0xBE,(byte)0x39,(byte)0x4A,(byte)0x4C,(byte)0x58,(byte)0xCF,
        (byte)0xD0,(byte)0xEF,(byte)0xAA,(byte)0xFB,(byte)0x43,(byte)0x4D,(byte)0x33,(byte)0x85,(byte)0x45,(byte)0xF9,(byte)0x02,(byte)0x7F,(byte)0x50,(byte)0x3C,(byte)0x9F,(byte)0xA8,
        (byte)0x51,(byte)0xA3,(byte)0x40,(byte)0x8F,(byte)0x92,(byte)0x9D,(byte)0x38,(byte)0xF5,(byte)0xBC,(byte)0xB6,(byte)0xDA,(byte)0x21,(byte)0x10,(byte)0xFF,(byte)0xF3,(byte)0xD2,
        (byte)0xCD,(byte)0x0C,(byte)0x13,(byte)0xEC,(byte)0x5F,(byte)0x97,(byte)0x44,(byte)0x17,(byte)0xC4,(byte)0xA7,(byte)0x7E,(byte)0x3D,(byte)0x64,(byte)0x5D,(byte)0x19,(byte)0x73,
        (byte)0x60,(byte)0x81,(byte)0x4F,(byte)0xDC,(byte)0x22,(byte)0x2A,(byte)0x90,(byte)0x88,(byte)0x46,(byte)0xEE,(byte)0xB8,(byte)0x14,(byte)0xDE,(byte)0x5E,(byte)0x0B,(byte)0xDB,
        (byte)0xE0,(byte)0x32,(byte)0x3A,(byte)0x0A,(byte)0x49,(byte)0x06,(byte)0x24,(byte)0x5C,(byte)0xC2,(byte)0xD3,(byte)0xAC,(byte)0x62,(byte)0x91,(byte)0x95,(byte)0xE4,(byte)0x79,
        (byte)0xE7,(byte)0xC8,(byte)0x37,(byte)0x6D,(byte)0x8D,(byte)0xD5,(byte)0x4E,(byte)0xA9,(byte)0x6C,(byte)0x56,(byte)0xF4,(byte)0xEA,(byte)0x65,(byte)0x7A,(byte)0xAE,(byte)0x08,
        (byte)0xBA,(byte)0x78,(byte)0x25,(byte)0x2E,(byte)0x1C,(byte)0xA6,(byte)0xB4,(byte)0xC6,(byte)0xE8,(byte)0xDD,(byte)0x74,(byte)0x1F,(byte)0x4B,(byte)0xBD,(byte)0x8B,(byte)0x8A,
        (byte)0x70,(byte)0x3E,(byte)0xB5,(byte)0x66,(byte)0x48,(byte)0x03,(byte)0xF6,(byte)0x0E,(byte)0x61,(byte)0x35,(byte)0x57,(byte)0xB9,(byte)0x86,(byte)0xC1,(byte)0x1D,(byte)0x9E,
        (byte)0xE1,(byte)0xF8,(byte)0x98,(byte)0x11,(byte)0x69,(byte)0xD9,(byte)0x8E,(byte)0x94,(byte)0x9B,(byte)0x1E,(byte)0x87,(byte)0xE9,(byte)0xCE,(byte)0x55,(byte)0x28,(byte)0xDF,
        (byte)0x8C,(byte)0xA1,(byte)0x89,(byte)0x0D,(byte)0xBF,(byte)0xE6,(byte)0x42,(byte)0x68,(byte)0x41,(byte)0x99,(byte)0x2D,(byte)0x0F,(byte)0xB0,(byte)0x54,(byte)0xBB,(byte)0x16
    };

    // Inverse S-box http://en.wikipedia.org/wiki/Rijndael_S-box
    private static final byte[] inv_s = {
        (byte)0x52,(byte)0x09,(byte)0x6A,(byte)0xD5,(byte)0x30,(byte)0x36,(byte)0xA5,(byte)0x38,(byte)0xBF,(byte)0x40,(byte)0xA3,(byte)0x9E,(byte)0x81,(byte)0xF3,(byte)0xD7,(byte)0xFB,
        (byte)0x7C,(byte)0xE3,(byte)0x39,(byte)0x82,(byte)0x9B,(byte)0x2F,(byte)0xFF,(byte)0x87,(byte)0x34,(byte)0x8E,(byte)0x43,(byte)0x44,(byte)0xC4,(byte)0xDE,(byte)0xE9,(byte)0xCB,
        (byte)0x54,(byte)0x7B,(byte)0x94,(byte)0x32,(byte)0xA6,(byte)0xC2,(byte)0x23,(byte)0x3D,(byte)0xEE,(byte)0x4C,(byte)0x95,(byte)0x0B,(byte)0x42,(byte)0xFA,(byte)0xC3,(byte)0x4E,
        (byte)0x08,(byte)0x2E,(byte)0xA1,(byte)0x66,(byte)0x28,(byte)0xD9,(byte)0x24,(byte)0xB2,(byte)0x76,(byte)0x5B,(byte)0xA2,(byte)0x49,(byte)0x6D,(byte)0x8B,(byte)0xD1,(byte)0x25,
        (byte)0x72,(byte)0xF8,(byte)0xF6,(byte)0x64,(byte)0x86,(byte)0x68,(byte)0x98,(byte)0x16,(byte)0xD4,(byte)0xA4,(byte)0x5C,(byte)0xCC,(byte)0x5D,(byte)0x65,(byte)0xB6,(byte)0x92,
        (byte)0x6C,(byte)0x70,(byte)0x48,(byte)0x50,(byte)0xFD,(byte)0xED,(byte)0xB9,(byte)0xDA,(byte)0x5E,(byte)0x15,(byte)0x46,(byte)0x57,(byte)0xA7,(byte)0x8D,(byte)0x9D,(byte)0x84,
        (byte)0x90,(byte)0xD8,(byte)0xAB,(byte)0x00,(byte)0x8C,(byte)0xBC,(byte)0xD3,(byte)0x0A,(byte)0xF7,(byte)0xE4,(byte)0x58,(byte)0x05,(byte)0xB8,(byte)0xB3,(byte)0x45,(byte)0x06,
        (byte)0xD0,(byte)0x2C,(byte)0x1E,(byte)0x8F,(byte)0xCA,(byte)0x3F,(byte)0x0F,(byte)0x02,(byte)0xC1,(byte)0xAF,(byte)0xBD,(byte)0x03,(byte)0x01,(byte)0x13,(byte)0x8A,(byte)0x6B,
        (byte)0x3A,(byte)0x91,(byte)0x11,(byte)0x41,(byte)0x4F,(byte)0x67,(byte)0xDC,(byte)0xEA,(byte)0x97,(byte)0xF2,(byte)0xCF,(byte)0xCE,(byte)0xF0,(byte)0xB4,(byte)0xE6,(byte)0x73,
        (byte)0x96,(byte)0xAC,(byte)0x74,(byte)0x22,(byte)0xE7,(byte)0xAD,(byte)0x35,(byte)0x85,(byte)0xE2,(byte)0xF9,(byte)0x37,(byte)0xE8,(byte)0x1C,(byte)0x75,(byte)0xDF,(byte)0x6E,
        (byte)0x47,(byte)0xF1,(byte)0x1A,(byte)0x71,(byte)0x1D,(byte)0x29,(byte)0xC5,(byte)0x89,(byte)0x6F,(byte)0xB7,(byte)0x62,(byte)0x0E,(byte)0xAA,(byte)0x18,(byte)0xBE,(byte)0x1B,
        (byte)0xFC,(byte)0x56,(byte)0x3E,(byte)0x4B,(byte)0xC6,(byte)0xD2,(byte)0x79,(byte)0x20,(byte)0x9A,(byte)0xDB,(byte)0xC0,(byte)0xFE,(byte)0x78,(byte)0xCD,(byte)0x5A,(byte)0xF4,
        (byte)0x1F,(byte)0xDD,(byte)0xA8,(byte)0x33,(byte)0x88,(byte)0x07,(byte)0xC7,(byte)0x31,(byte)0xB1,(byte)0x12,(byte)0x10,(byte)0x59,(byte)0x27,(byte)0x80,(byte)0xEC,(byte)0x5F,
        (byte)0x60,(byte)0x51,(byte)0x7F,(byte)0xA9,(byte)0x19,(byte)0xB5,(byte)0x4A,(byte)0x0D,(byte)0x2D,(byte)0xE5,(byte)0x7A,(byte)0x9F,(byte)0x93,(byte)0xC9,(byte)0x9C,(byte)0xEF,
        (byte)0xA0,(byte)0xE0,(byte)0x3B,(byte)0x4D,(byte)0xAE,(byte)0x2A,(byte)0xF5,(byte)0xB0,(byte)0xC8,(byte)0xEB,(byte)0xBB,(byte)0x3C,(byte)0x83,(byte)0x53,(byte)0x99,(byte)0x61,
        (byte)0x17,(byte)0x2B,(byte)0x04,(byte)0x7E,(byte)0xBA,(byte)0x77,(byte)0xD6,(byte)0x26,(byte)0xE1,(byte)0x69,(byte)0x14,(byte)0x63,(byte)0x55,(byte)0x21,(byte)0x0C,(byte)0x7D
    };

    // Galois multiplication tables for MixCols and InverseMixCols http://en.wikipedia.org/wiki/Rijndael_mix_columns
    private static final byte[] gm_2 = {
        (byte)0x00,(byte)0x02,(byte)0x04,(byte)0x06,(byte)0x08,(byte)0x0a,(byte)0x0c,(byte)0x0e,(byte)0x10,(byte)0x12,(byte)0x14,(byte)0x16,(byte)0x18,(byte)0x1a,(byte)0x1c,(byte)0x1e,
        (byte)0x20,(byte)0x22,(byte)0x24,(byte)0x26,(byte)0x28,(byte)0x2a,(byte)0x2c,(byte)0x2e,(byte)0x30,(byte)0x32,(byte)0x34,(byte)0x36,(byte)0x38,(byte)0x3a,(byte)0x3c,(byte)0x3e,
        (byte)0x40,(byte)0x42,(byte)0x44,(byte)0x46,(byte)0x48,(byte)0x4a,(byte)0x4c,(byte)0x4e,(byte)0x50,(byte)0x52,(byte)0x54,(byte)0x56,(byte)0x58,(byte)0x5a,(byte)0x5c,(byte)0x5e,
        (byte)0x60,(byte)0x62,(byte)0x64,(byte)0x66,(byte)0x68,(byte)0x6a,(byte)0x6c,(byte)0x6e,(byte)0x70,(byte)0x72,(byte)0x74,(byte)0x76,(byte)0x78,(byte)0x7a,(byte)0x7c,(byte)0x7e,
        (byte)0x80,(byte)0x82,(byte)0x84,(byte)0x86,(byte)0x88,(byte)0x8a,(byte)0x8c,(byte)0x8e,(byte)0x90,(byte)0x92,(byte)0x94,(byte)0x96,(byte)0x98,(byte)0x9a,(byte)0x9c,(byte)0x9e,
        (byte)0xa0,(byte)0xa2,(byte)0xa4,(byte)0xa6,(byte)0xa8,(byte)0xaa,(byte)0xac,(byte)0xae,(byte)0xb0,(byte)0xb2,(byte)0xb4,(byte)0xb6,(byte)0xb8,(byte)0xba,(byte)0xbc,(byte)0xbe,
        (byte)0xc0,(byte)0xc2,(byte)0xc4,(byte)0xc6,(byte)0xc8,(byte)0xca,(byte)0xcc,(byte)0xce,(byte)0xd0,(byte)0xd2,(byte)0xd4,(byte)0xd6,(byte)0xd8,(byte)0xda,(byte)0xdc,(byte)0xde,
        (byte)0xe0,(byte)0xe2,(byte)0xe4,(byte)0xe6,(byte)0xe8,(byte)0xea,(byte)0xec,(byte)0xee,(byte)0xf0,(byte)0xf2,(byte)0xf4,(byte)0xf6,(byte)0xf8,(byte)0xfa,(byte)0xfc,(byte)0xfe,
        (byte)0x1b,(byte)0x19,(byte)0x1f,(byte)0x1d,(byte)0x13,(byte)0x11,(byte)0x17,(byte)0x15,(byte)0x0b,(byte)0x09,(byte)0x0f,(byte)0x0d,(byte)0x03,(byte)0x01,(byte)0x07,(byte)0x05,
        (byte)0x3b,(byte)0x39,(byte)0x3f,(byte)0x3d,(byte)0x33,(byte)0x31,(byte)0x37,(byte)0x35,(byte)0x2b,(byte)0x29,(byte)0x2f,(byte)0x2d,(byte)0x23,(byte)0x21,(byte)0x27,(byte)0x25,
        (byte)0x5b,(byte)0x59,(byte)0x5f,(byte)0x5d,(byte)0x53,(byte)0x51,(byte)0x57,(byte)0x55,(byte)0x4b,(byte)0x49,(byte)0x4f,(byte)0x4d,(byte)0x43,(byte)0x41,(byte)0x47,(byte)0x45,
        (byte)0x7b,(byte)0x79,(byte)0x7f,(byte)0x7d,(byte)0x73,(byte)0x71,(byte)0x77,(byte)0x75,(byte)0x6b,(byte)0x69,(byte)0x6f,(byte)0x6d,(byte)0x63,(byte)0x61,(byte)0x67,(byte)0x65,
        (byte)0x9b,(byte)0x99,(byte)0x9f,(byte)0x9d,(byte)0x93,(byte)0x91,(byte)0x97,(byte)0x95,(byte)0x8b,(byte)0x89,(byte)0x8f,(byte)0x8d,(byte)0x83,(byte)0x81,(byte)0x87,(byte)0x85,
        (byte)0xbb,(byte)0xb9,(byte)0xbf,(byte)0xbd,(byte)0xb3,(byte)0xb1,(byte)0xb7,(byte)0xb5,(byte)0xab,(byte)0xa9,(byte)0xaf,(byte)0xad,(byte)0xa3,(byte)0xa1,(byte)0xa7,(byte)0xa5,
        (byte)0xdb,(byte)0xd9,(byte)0xdf,(byte)0xdd,(byte)0xd3,(byte)0xd1,(byte)0xd7,(byte)0xd5,(byte)0xcb,(byte)0xc9,(byte)0xcf,(byte)0xcd,(byte)0xc3,(byte)0xc1,(byte)0xc7,(byte)0xc5,
        (byte)0xfb,(byte)0xf9,(byte)0xff,(byte)0xfd,(byte)0xf3,(byte)0xf1,(byte)0xf7,(byte)0xf5,(byte)0xeb,(byte)0xe9,(byte)0xef,(byte)0xed,(byte)0xe3,(byte)0xe1,(byte)0xe7,(byte)0xe5
    };

    private static final byte[] gm_3 = {
        (byte)0x00,(byte)0x03,(byte)0x06,(byte)0x05,(byte)0x0c,(byte)0x0f,(byte)0x0a,(byte)0x09,(byte)0x18,(byte)0x1b,(byte)0x1e,(byte)0x1d,(byte)0x14,(byte)0x17,(byte)0x12,(byte)0x11,
        (byte)0x30,(byte)0x33,(byte)0x36,(byte)0x35,(byte)0x3c,(byte)0x3f,(byte)0x3a,(byte)0x39,(byte)0x28,(byte)0x2b,(byte)0x2e,(byte)0x2d,(byte)0x24,(byte)0x27,(byte)0x22,(byte)0x21,
        (byte)0x60,(byte)0x63,(byte)0x66,(byte)0x65,(byte)0x6c,(byte)0x6f,(byte)0x6a,(byte)0x69,(byte)0x78,(byte)0x7b,(byte)0x7e,(byte)0x7d,(byte)0x74,(byte)0x77,(byte)0x72,(byte)0x71,
        (byte)0x50,(byte)0x53,(byte)0x56,(byte)0x55,(byte)0x5c,(byte)0x5f,(byte)0x5a,(byte)0x59,(byte)0x48,(byte)0x4b,(byte)0x4e,(byte)0x4d,(byte)0x44,(byte)0x47,(byte)0x42,(byte)0x41,
        (byte)0xc0,(byte)0xc3,(byte)0xc6,(byte)0xc5,(byte)0xcc,(byte)0xcf,(byte)0xca,(byte)0xc9,(byte)0xd8,(byte)0xdb,(byte)0xde,(byte)0xdd,(byte)0xd4,(byte)0xd7,(byte)0xd2,(byte)0xd1,
        (byte)0xf0,(byte)0xf3,(byte)0xf6,(byte)0xf5,(byte)0xfc,(byte)0xff,(byte)0xfa,(byte)0xf9,(byte)0xe8,(byte)0xeb,(byte)0xee,(byte)0xed,(byte)0xe4,(byte)0xe7,(byte)0xe2,(byte)0xe1,
        (byte)0xa0,(byte)0xa3,(byte)0xa6,(byte)0xa5,(byte)0xac,(byte)0xaf,(byte)0xaa,(byte)0xa9,(byte)0xb8,(byte)0xbb,(byte)0xbe,(byte)0xbd,(byte)0xb4,(byte)0xb7,(byte)0xb2,(byte)0xb1,
        (byte)0x90,(byte)0x93,(byte)0x96,(byte)0x95,(byte)0x9c,(byte)0x9f,(byte)0x9a,(byte)0x99,(byte)0x88,(byte)0x8b,(byte)0x8e,(byte)0x8d,(byte)0x84,(byte)0x87,(byte)0x82,(byte)0x81,
        (byte)0x9b,(byte)0x98,(byte)0x9d,(byte)0x9e,(byte)0x97,(byte)0x94,(byte)0x91,(byte)0x92,(byte)0x83,(byte)0x80,(byte)0x85,(byte)0x86,(byte)0x8f,(byte)0x8c,(byte)0x89,(byte)0x8a,
        (byte)0xab,(byte)0xa8,(byte)0xad,(byte)0xae,(byte)0xa7,(byte)0xa4,(byte)0xa1,(byte)0xa2,(byte)0xb3,(byte)0xb0,(byte)0xb5,(byte)0xb6,(byte)0xbf,(byte)0xbc,(byte)0xb9,(byte)0xba,
        (byte)0xfb,(byte)0xf8,(byte)0xfd,(byte)0xfe,(byte)0xf7,(byte)0xf4,(byte)0xf1,(byte)0xf2,(byte)0xe3,(byte)0xe0,(byte)0xe5,(byte)0xe6,(byte)0xef,(byte)0xec,(byte)0xe9,(byte)0xea,
        (byte)0xcb,(byte)0xc8,(byte)0xcd,(byte)0xce,(byte)0xc7,(byte)0xc4,(byte)0xc1,(byte)0xc2,(byte)0xd3,(byte)0xd0,(byte)0xd5,(byte)0xd6,(byte)0xdf,(byte)0xdc,(byte)0xd9,(byte)0xda,
        (byte)0x5b,(byte)0x58,(byte)0x5d,(byte)0x5e,(byte)0x57,(byte)0x54,(byte)0x51,(byte)0x52,(byte)0x43,(byte)0x40,(byte)0x45,(byte)0x46,(byte)0x4f,(byte)0x4c,(byte)0x49,(byte)0x4a,
        (byte)0x6b,(byte)0x68,(byte)0x6d,(byte)0x6e,(byte)0x67,(byte)0x64,(byte)0x61,(byte)0x62,(byte)0x73,(byte)0x70,(byte)0x75,(byte)0x76,(byte)0x7f,(byte)0x7c,(byte)0x79,(byte)0x7a,
        (byte)0x3b,(byte)0x38,(byte)0x3d,(byte)0x3e,(byte)0x37,(byte)0x34,(byte)0x31,(byte)0x32,(byte)0x23,(byte)0x20,(byte)0x25,(byte)0x26,(byte)0x2f,(byte)0x2c,(byte)0x29,(byte)0x2a,
        (byte)0x0b,(byte)0x08,(byte)0x0d,(byte)0x0e,(byte)0x07,(byte)0x04,(byte)0x01,(byte)0x02,(byte)0x13,(byte)0x10,(byte)0x15,(byte)0x16,(byte)0x1f,(byte)0x1c,(byte)0x19,(byte)0x1a
    };

    private static final byte[] gm_9 = {
        (byte)0x00,(byte)0x09,(byte)0x12,(byte)0x1b,(byte)0x24,(byte)0x2d,(byte)0x36,(byte)0x3f,(byte)0x48,(byte)0x41,(byte)0x5a,(byte)0x53,(byte)0x6c,(byte)0x65,(byte)0x7e,(byte)0x77,
        (byte)0x90,(byte)0x99,(byte)0x82,(byte)0x8b,(byte)0xb4,(byte)0xbd,(byte)0xa6,(byte)0xaf,(byte)0xd8,(byte)0xd1,(byte)0xca,(byte)0xc3,(byte)0xfc,(byte)0xf5,(byte)0xee,(byte)0xe7,
        (byte)0x3b,(byte)0x32,(byte)0x29,(byte)0x20,(byte)0x1f,(byte)0x16,(byte)0x0d,(byte)0x04,(byte)0x73,(byte)0x7a,(byte)0x61,(byte)0x68,(byte)0x57,(byte)0x5e,(byte)0x45,(byte)0x4c,
        (byte)0xab,(byte)0xa2,(byte)0xb9,(byte)0xb0,(byte)0x8f,(byte)0x86,(byte)0x9d,(byte)0x94,(byte)0xe3,(byte)0xea,(byte)0xf1,(byte)0xf8,(byte)0xc7,(byte)0xce,(byte)0xd5,(byte)0xdc,
        (byte)0x76,(byte)0x7f,(byte)0x64,(byte)0x6d,(byte)0x52,(byte)0x5b,(byte)0x40,(byte)0x49,(byte)0x3e,(byte)0x37,(byte)0x2c,(byte)0x25,(byte)0x1a,(byte)0x13,(byte)0x08,(byte)0x01,
        (byte)0xe6,(byte)0xef,(byte)0xf4,(byte)0xfd,(byte)0xc2,(byte)0xcb,(byte)0xd0,(byte)0xd9,(byte)0xae,(byte)0xa7,(byte)0xbc,(byte)0xb5,(byte)0x8a,(byte)0x83,(byte)0x98,(byte)0x91,
        (byte)0x4d,(byte)0x44,(byte)0x5f,(byte)0x56,(byte)0x69,(byte)0x60,(byte)0x7b,(byte)0x72,(byte)0x05,(byte)0x0c,(byte)0x17,(byte)0x1e,(byte)0x21,(byte)0x28,(byte)0x33,(byte)0x3a,
        (byte)0xdd,(byte)0xd4,(byte)0xcf,(byte)0xc6,(byte)0xf9,(byte)0xf0,(byte)0xeb,(byte)0xe2,(byte)0x95,(byte)0x9c,(byte)0x87,(byte)0x8e,(byte)0xb1,(byte)0xb8,(byte)0xa3,(byte)0xaa,
        (byte)0xec,(byte)0xe5,(byte)0xfe,(byte)0xf7,(byte)0xc8,(byte)0xc1,(byte)0xda,(byte)0xd3,(byte)0xa4,(byte)0xad,(byte)0xb6,(byte)0xbf,(byte)0x80,(byte)0x89,(byte)0x92,(byte)0x9b,
        (byte)0x7c,(byte)0x75,(byte)0x6e,(byte)0x67,(byte)0x58,(byte)0x51,(byte)0x4a,(byte)0x43,(byte)0x34,(byte)0x3d,(byte)0x26,(byte)0x2f,(byte)0x10,(byte)0x19,(byte)0x02,(byte)0x0b,
        (byte)0xd7,(byte)0xde,(byte)0xc5,(byte)0xcc,(byte)0xf3,(byte)0xfa,(byte)0xe1,(byte)0xe8,(byte)0x9f,(byte)0x96,(byte)0x8d,(byte)0x84,(byte)0xbb,(byte)0xb2,(byte)0xa9,(byte)0xa0,
        (byte)0x47,(byte)0x4e,(byte)0x55,(byte)0x5c,(byte)0x63,(byte)0x6a,(byte)0x71,(byte)0x78,(byte)0x0f,(byte)0x06,(byte)0x1d,(byte)0x14,(byte)0x2b,(byte)0x22,(byte)0x39,(byte)0x30,
        (byte)0x9a,(byte)0x93,(byte)0x88,(byte)0x81,(byte)0xbe,(byte)0xb7,(byte)0xac,(byte)0xa5,(byte)0xd2,(byte)0xdb,(byte)0xc0,(byte)0xc9,(byte)0xf6,(byte)0xff,(byte)0xe4,(byte)0xed,
        (byte)0x0a,(byte)0x03,(byte)0x18,(byte)0x11,(byte)0x2e,(byte)0x27,(byte)0x3c,(byte)0x35,(byte)0x42,(byte)0x4b,(byte)0x50,(byte)0x59,(byte)0x66,(byte)0x6f,(byte)0x74,(byte)0x7d,
        (byte)0xa1,(byte)0xa8,(byte)0xb3,(byte)0xba,(byte)0x85,(byte)0x8c,(byte)0x97,(byte)0x9e,(byte)0xe9,(byte)0xe0,(byte)0xfb,(byte)0xf2,(byte)0xcd,(byte)0xc4,(byte)0xdf,(byte)0xd6,
        (byte)0x31,(byte)0x38,(byte)0x23,(byte)0x2a,(byte)0x15,(byte)0x1c,(byte)0x07,(byte)0x0e,(byte)0x79,(byte)0x70,(byte)0x6b,(byte)0x62,(byte)0x5d,(byte)0x54,(byte)0x4f,(byte)0x46
    };

    private static final byte[] gm_11 = {
        (byte)0x00,(byte)0x0b,(byte)0x16,(byte)0x1d,(byte)0x2c,(byte)0x27,(byte)0x3a,(byte)0x31,(byte)0x58,(byte)0x53,(byte)0x4e,(byte)0x45,(byte)0x74,(byte)0x7f,(byte)0x62,(byte)0x69,
        (byte)0xb0,(byte)0xbb,(byte)0xa6,(byte)0xad,(byte)0x9c,(byte)0x97,(byte)0x8a,(byte)0x81,(byte)0xe8,(byte)0xe3,(byte)0xfe,(byte)0xf5,(byte)0xc4,(byte)0xcf,(byte)0xd2,(byte)0xd9,
        (byte)0x7b,(byte)0x70,(byte)0x6d,(byte)0x66,(byte)0x57,(byte)0x5c,(byte)0x41,(byte)0x4a,(byte)0x23,(byte)0x28,(byte)0x35,(byte)0x3e,(byte)0x0f,(byte)0x04,(byte)0x19,(byte)0x12,
        (byte)0xcb,(byte)0xc0,(byte)0xdd,(byte)0xd6,(byte)0xe7,(byte)0xec,(byte)0xf1,(byte)0xfa,(byte)0x93,(byte)0x98,(byte)0x85,(byte)0x8e,(byte)0xbf,(byte)0xb4,(byte)0xa9,(byte)0xa2,
        (byte)0xf6,(byte)0xfd,(byte)0xe0,(byte)0xeb,(byte)0xda,(byte)0xd1,(byte)0xcc,(byte)0xc7,(byte)0xae,(byte)0xa5,(byte)0xb8,(byte)0xb3,(byte)0x82,(byte)0x89,(byte)0x94,(byte)0x9f,
        (byte)0x46,(byte)0x4d,(byte)0x50,(byte)0x5b,(byte)0x6a,(byte)0x61,(byte)0x7c,(byte)0x77,(byte)0x1e,(byte)0x15,(byte)0x08,(byte)0x03,(byte)0x32,(byte)0x39,(byte)0x24,(byte)0x2f,
        (byte)0x8d,(byte)0x86,(byte)0x9b,(byte)0x90,(byte)0xa1,(byte)0xaa,(byte)0xb7,(byte)0xbc,(byte)0xd5,(byte)0xde,(byte)0xc3,(byte)0xc8,(byte)0xf9,(byte)0xf2,(byte)0xef,(byte)0xe4,
        (byte)0x3d,(byte)0x36,(byte)0x2b,(byte)0x20,(byte)0x11,(byte)0x1a,(byte)0x07,(byte)0x0c,(byte)0x65,(byte)0x6e,(byte)0x73,(byte)0x78,(byte)0x49,(byte)0x42,(byte)0x5f,(byte)0x54,
        (byte)0xf7,(byte)0xfc,(byte)0xe1,(byte)0xea,(byte)0xdb,(byte)0xd0,(byte)0xcd,(byte)0xc6,(byte)0xaf,(byte)0xa4,(byte)0xb9,(byte)0xb2,(byte)0x83,(byte)0x88,(byte)0x95,(byte)0x9e,
        (byte)0x47,(byte)0x4c,(byte)0x51,(byte)0x5a,(byte)0x6b,(byte)0x60,(byte)0x7d,(byte)0x76,(byte)0x1f,(byte)0x14,(byte)0x09,(byte)0x02,(byte)0x33,(byte)0x38,(byte)0x25,(byte)0x2e,
        (byte)0x8c,(byte)0x87,(byte)0x9a,(byte)0x91,(byte)0xa0,(byte)0xab,(byte)0xb6,(byte)0xbd,(byte)0xd4,(byte)0xdf,(byte)0xc2,(byte)0xc9,(byte)0xf8,(byte)0xf3,(byte)0xee,(byte)0xe5,
        (byte)0x3c,(byte)0x37,(byte)0x2a,(byte)0x21,(byte)0x10,(byte)0x1b,(byte)0x06,(byte)0x0d,(byte)0x64,(byte)0x6f,(byte)0x72,(byte)0x79,(byte)0x48,(byte)0x43,(byte)0x5e,(byte)0x55,
        (byte)0x01,(byte)0x0a,(byte)0x17,(byte)0x1c,(byte)0x2d,(byte)0x26,(byte)0x3b,(byte)0x30,(byte)0x59,(byte)0x52,(byte)0x4f,(byte)0x44,(byte)0x75,(byte)0x7e,(byte)0x63,(byte)0x68,
        (byte)0xb1,(byte)0xba,(byte)0xa7,(byte)0xac,(byte)0x9d,(byte)0x96,(byte)0x8b,(byte)0x80,(byte)0xe9,(byte)0xe2,(byte)0xff,(byte)0xf4,(byte)0xc5,(byte)0xce,(byte)0xd3,(byte)0xd8,
        (byte)0x7a,(byte)0x71,(byte)0x6c,(byte)0x67,(byte)0x56,(byte)0x5d,(byte)0x40,(byte)0x4b,(byte)0x22,(byte)0x29,(byte)0x34,(byte)0x3f,(byte)0x0e,(byte)0x05,(byte)0x18,(byte)0x13,
        (byte)0xca,(byte)0xc1,(byte)0xdc,(byte)0xd7,(byte)0xe6,(byte)0xed,(byte)0xf0,(byte)0xfb,(byte)0x92,(byte)0x99,(byte)0x84,(byte)0x8f,(byte)0xbe,(byte)0xb5,(byte)0xa8,(byte)0xa3
    };

    private static final byte[] gm_13 = {
        (byte)0x00,(byte)0x0d,(byte)0x1a,(byte)0x17,(byte)0x34,(byte)0x39,(byte)0x2e,(byte)0x23,(byte)0x68,(byte)0x65,(byte)0x72,(byte)0x7f,(byte)0x5c,(byte)0x51,(byte)0x46,(byte)0x4b,
        (byte)0xd0,(byte)0xdd,(byte)0xca,(byte)0xc7,(byte)0xe4,(byte)0xe9,(byte)0xfe,(byte)0xf3,(byte)0xb8,(byte)0xb5,(byte)0xa2,(byte)0xaf,(byte)0x8c,(byte)0x81,(byte)0x96,(byte)0x9b,
        (byte)0xbb,(byte)0xb6,(byte)0xa1,(byte)0xac,(byte)0x8f,(byte)0x82,(byte)0x95,(byte)0x98,(byte)0xd3,(byte)0xde,(byte)0xc9,(byte)0xc4,(byte)0xe7,(byte)0xea,(byte)0xfd,(byte)0xf0,
        (byte)0x6b,(byte)0x66,(byte)0x71,(byte)0x7c,(byte)0x5f,(byte)0x52,(byte)0x45,(byte)0x48,(byte)0x03,(byte)0x0e,(byte)0x19,(byte)0x14,(byte)0x37,(byte)0x3a,(byte)0x2d,(byte)0x20,
        (byte)0x6d,(byte)0x60,(byte)0x77,(byte)0x7a,(byte)0x59,(byte)0x54,(byte)0x43,(byte)0x4e,(byte)0x05,(byte)0x08,(byte)0x1f,(byte)0x12,(byte)0x31,(byte)0x3c,(byte)0x2b,(byte)0x26,
        (byte)0xbd,(byte)0xb0,(byte)0xa7,(byte)0xaa,(byte)0x89,(byte)0x84,(byte)0x93,(byte)0x9e,(byte)0xd5,(byte)0xd8,(byte)0xcf,(byte)0xc2,(byte)0xe1,(byte)0xec,(byte)0xfb,(byte)0xf6,
        (byte)0xd6,(byte)0xdb,(byte)0xcc,(byte)0xc1,(byte)0xe2,(byte)0xef,(byte)0xf8,(byte)0xf5,(byte)0xbe,(byte)0xb3,(byte)0xa4,(byte)0xa9,(byte)0x8a,(byte)0x87,(byte)0x90,(byte)0x9d,
        (byte)0x06,(byte)0x0b,(byte)0x1c,(byte)0x11,(byte)0x32,(byte)0x3f,(byte)0x28,(byte)0x25,(byte)0x6e,(byte)0x63,(byte)0x74,(byte)0x79,(byte)0x5a,(byte)0x57,(byte)0x40,(byte)0x4d,
        (byte)0xda,(byte)0xd7,(byte)0xc0,(byte)0xcd,(byte)0xee,(byte)0xe3,(byte)0xf4,(byte)0xf9,(byte)0xb2,(byte)0xbf,(byte)0xa8,(byte)0xa5,(byte)0x86,(byte)0x8b,(byte)0x9c,(byte)0x91,
        (byte)0x0a,(byte)0x07,(byte)0x10,(byte)0x1d,(byte)0x3e,(byte)0x33,(byte)0x24,(byte)0x29,(byte)0x62,(byte)0x6f,(byte)0x78,(byte)0x75,(byte)0x56,(byte)0x5b,(byte)0x4c,(byte)0x41,
        (byte)0x61,(byte)0x6c,(byte)0x7b,(byte)0x76,(byte)0x55,(byte)0x58,(byte)0x4f,(byte)0x42,(byte)0x09,(byte)0x04,(byte)0x13,(byte)0x1e,(byte)0x3d,(byte)0x30,(byte)0x27,(byte)0x2a,
        (byte)0xb1,(byte)0xbc,(byte)0xab,(byte)0xa6,(byte)0x85,(byte)0x88,(byte)0x9f,(byte)0x92,(byte)0xd9,(byte)0xd4,(byte)0xc3,(byte)0xce,(byte)0xed,(byte)0xe0,(byte)0xf7,(byte)0xfa,
        (byte)0xb7,(byte)0xba,(byte)0xad,(byte)0xa0,(byte)0x83,(byte)0x8e,(byte)0x99,(byte)0x94,(byte)0xdf,(byte)0xd2,(byte)0xc5,(byte)0xc8,(byte)0xeb,(byte)0xe6,(byte)0xf1,(byte)0xfc,
        (byte)0x67,(byte)0x6a,(byte)0x7d,(byte)0x70,(byte)0x53,(byte)0x5e,(byte)0x49,(byte)0x44,(byte)0x0f,(byte)0x02,(byte)0x15,(byte)0x18,(byte)0x3b,(byte)0x36,(byte)0x21,(byte)0x2c,
        (byte)0x0c,(byte)0x01,(byte)0x16,(byte)0x1b,(byte)0x38,(byte)0x35,(byte)0x22,(byte)0x2f,(byte)0x64,(byte)0x69,(byte)0x7e,(byte)0x73,(byte)0x50,(byte)0x5d,(byte)0x4a,(byte)0x47,
        (byte)0xdc,(byte)0xd1,(byte)0xc6,(byte)0xcb,(byte)0xe8,(byte)0xe5,(byte)0xf2,(byte)0xff,(byte)0xb4,(byte)0xb9,(byte)0xae,(byte)0xa3,(byte)0x80,(byte)0x8d,(byte)0x9a,(byte)0x97
    };

    private static final byte[] gm_14 = {
        (byte)0x00,(byte)0x0e,(byte)0x1c,(byte)0x12,(byte)0x38,(byte)0x36,(byte)0x24,(byte)0x2a,(byte)0x70,(byte)0x7e,(byte)0x6c,(byte)0x62,(byte)0x48,(byte)0x46,(byte)0x54,(byte)0x5a,
        (byte)0xe0,(byte)0xee,(byte)0xfc,(byte)0xf2,(byte)0xd8,(byte)0xd6,(byte)0xc4,(byte)0xca,(byte)0x90,(byte)0x9e,(byte)0x8c,(byte)0x82,(byte)0xa8,(byte)0xa6,(byte)0xb4,(byte)0xba,
        (byte)0xdb,(byte)0xd5,(byte)0xc7,(byte)0xc9,(byte)0xe3,(byte)0xed,(byte)0xff,(byte)0xf1,(byte)0xab,(byte)0xa5,(byte)0xb7,(byte)0xb9,(byte)0x93,(byte)0x9d,(byte)0x8f,(byte)0x81,
        (byte)0x3b,(byte)0x35,(byte)0x27,(byte)0x29,(byte)0x03,(byte)0x0d,(byte)0x1f,(byte)0x11,(byte)0x4b,(byte)0x45,(byte)0x57,(byte)0x59,(byte)0x73,(byte)0x7d,(byte)0x6f,(byte)0x61,
        (byte)0xad,(byte)0xa3,(byte)0xb1,(byte)0xbf,(byte)0x95,(byte)0x9b,(byte)0x89,(byte)0x87,(byte)0xdd,(byte)0xd3,(byte)0xc1,(byte)0xcf,(byte)0xe5,(byte)0xeb,(byte)0xf9,(byte)0xf7,
        (byte)0x4d,(byte)0x43,(byte)0x51,(byte)0x5f,(byte)0x75,(byte)0x7b,(byte)0x69,(byte)0x67,(byte)0x3d,(byte)0x33,(byte)0x21,(byte)0x2f,(byte)0x05,(byte)0x0b,(byte)0x19,(byte)0x17,
        (byte)0x76,(byte)0x78,(byte)0x6a,(byte)0x64,(byte)0x4e,(byte)0x40,(byte)0x52,(byte)0x5c,(byte)0x06,(byte)0x08,(byte)0x1a,(byte)0x14,(byte)0x3e,(byte)0x30,(byte)0x22,(byte)0x2c,
        (byte)0x96,(byte)0x98,(byte)0x8a,(byte)0x84,(byte)0xae,(byte)0xa0,(byte)0xb2,(byte)0xbc,(byte)0xe6,(byte)0xe8,(byte)0xfa,(byte)0xf4,(byte)0xde,(byte)0xd0,(byte)0xc2,(byte)0xcc,
        (byte)0x41,(byte)0x4f,(byte)0x5d,(byte)0x53,(byte)0x79,(byte)0x77,(byte)0x65,(byte)0x6b,(byte)0x31,(byte)0x3f,(byte)0x2d,(byte)0x23,(byte)0x09,(byte)0x07,(byte)0x15,(byte)0x1b,
        (byte)0xa1,(byte)0xaf,(byte)0xbd,(byte)0xb3,(byte)0x99,(byte)0x97,(byte)0x85,(byte)0x8b,(byte)0xd1,(byte)0xdf,(byte)0xcd,(byte)0xc3,(byte)0xe9,(byte)0xe7,(byte)0xf5,(byte)0xfb,
        (byte)0x9a,(byte)0x94,(byte)0x86,(byte)0x88,(byte)0xa2,(byte)0xac,(byte)0xbe,(byte)0xb0,(byte)0xea,(byte)0xe4,(byte)0xf6,(byte)0xf8,(byte)0xd2,(byte)0xdc,(byte)0xce,(byte)0xc0,
        (byte)0x7a,(byte)0x74,(byte)0x66,(byte)0x68,(byte)0x42,(byte)0x4c,(byte)0x5e,(byte)0x50,(byte)0x0a,(byte)0x04,(byte)0x16,(byte)0x18,(byte)0x32,(byte)0x3c,(byte)0x2e,(byte)0x20,
        (byte)0xec,(byte)0xe2,(byte)0xf0,(byte)0xfe,(byte)0xd4,(byte)0xda,(byte)0xc8,(byte)0xc6,(byte)0x9c,(byte)0x92,(byte)0x80,(byte)0x8e,(byte)0xa4,(byte)0xaa,(byte)0xb8,(byte)0xb6,
        (byte)0x0c,(byte)0x02,(byte)0x10,(byte)0x1e,(byte)0x34,(byte)0x3a,(byte)0x28,(byte)0x26,(byte)0x7c,(byte)0x72,(byte)0x60,(byte)0x6e,(byte)0x44,(byte)0x4a,(byte)0x58,(byte)0x56,
        (byte)0x37,(byte)0x39,(byte)0x2b,(byte)0x25,(byte)0x0f,(byte)0x01,(byte)0x13,(byte)0x1d,(byte)0x47,(byte)0x49,(byte)0x5b,(byte)0x55,(byte)0x7f,(byte)0x71,(byte)0x63,(byte)0x6d,
        (byte)0xd7,(byte)0xd9,(byte)0xcb,(byte)0xc5,(byte)0xef,(byte)0xe1,(byte)0xf3,(byte)0xfd,(byte)0xa7,(byte)0xa9,(byte)0xbb,(byte)0xb5,(byte)0x9f,(byte)0x91,(byte)0x83,(byte)0x8d
    };

    // http://en.wikipedia.org/wiki/Rijndael_key_schedule
    private static final byte[] rcon = {
        (byte)0x8d,(byte)0x01,(byte)0x02,(byte)0x04,(byte)0x08,(byte)0x10,(byte)0x20,(byte)0x40,(byte)0x80,(byte)0x1b,(byte)0x36,(byte)0x6c,(byte)0xd8,(byte)0xab,(byte)0x4d,(byte)0x9a,
        (byte)0x2f,(byte)0x5e,(byte)0xbc,(byte)0x63,(byte)0xc6,(byte)0x97,(byte)0x35,(byte)0x6a,(byte)0xd4,(byte)0xb3,(byte)0x7d,(byte)0xfa,(byte)0xef,(byte)0xc5,(byte)0x91,(byte)0x39,
        (byte)0x72,(byte)0xe4,(byte)0xd3,(byte)0xbd,(byte)0x61,(byte)0xc2,(byte)0x9f,(byte)0x25,(byte)0x4a,(byte)0x94,(byte)0x33,(byte)0x66,(byte)0xcc,(byte)0x83,(byte)0x1d,(byte)0x3a,
        (byte)0x74,(byte)0xe8,(byte)0xcb,(byte)0x8d,(byte)0x01,(byte)0x02,(byte)0x04,(byte)0x08,(byte)0x10,(byte)0x20,(byte)0x40,(byte)0x80,(byte)0x1b,(byte)0x36,(byte)0x6c,(byte)0xd8,
        (byte)0xab,(byte)0x4d,(byte)0x9a,(byte)0x2f,(byte)0x5e,(byte)0xbc,(byte)0x63,(byte)0xc6,(byte)0x97,(byte)0x35,(byte)0x6a,(byte)0xd4,(byte)0xb3,(byte)0x7d,(byte)0xfa,(byte)0xef,
        (byte)0xc5,(byte)0x91,(byte)0x39,(byte)0x72,(byte)0xe4,(byte)0xd3,(byte)0xbd,(byte)0x61,(byte)0xc2,(byte)0x9f,(byte)0x25,(byte)0x4a,(byte)0x94,(byte)0x33,(byte)0x66,(byte)0xcc,
        (byte)0x83,(byte)0x1d,(byte)0x3a,(byte)0x74,(byte)0xe8,(byte)0xcb,(byte)0x8d,(byte)0x01,(byte)0x02,(byte)0x04,(byte)0x08,(byte)0x10,(byte)0x20,(byte)0x40,(byte)0x80,(byte)0x1b,
        (byte)0x36,(byte)0x6c,(byte)0xd8,(byte)0xab,(byte)0x4d,(byte)0x9a,(byte)0x2f,(byte)0x5e,(byte)0xbc,(byte)0x63,(byte)0xc6,(byte)0x97,(byte)0x35,(byte)0x6a,(byte)0xd4,(byte)0xb3,
        (byte)0x7d,(byte)0xfa,(byte)0xef,(byte)0xc5,(byte)0x91,(byte)0x39,(byte)0x72,(byte)0xe4,(byte)0xd3,(byte)0xbd,(byte)0x61,(byte)0xc2,(byte)0x9f,(byte)0x25,(byte)0x4a,(byte)0x94,
        (byte)0x33,(byte)0x66,(byte)0xcc,(byte)0x83,(byte)0x1d,(byte)0x3a,(byte)0x74,(byte)0xe8,(byte)0xcb,(byte)0x8d,(byte)0x01,(byte)0x02,(byte)0x04,(byte)0x08,(byte)0x10,(byte)0x20,
        (byte)0x40,(byte)0x80,(byte)0x1b,(byte)0x36,(byte)0x6c,(byte)0xd8,(byte)0xab,(byte)0x4d,(byte)0x9a,(byte)0x2f,(byte)0x5e,(byte)0xbc,(byte)0x63,(byte)0xc6,(byte)0x97,(byte)0x35,
        (byte)0x6a,(byte)0xd4,(byte)0xb3,(byte)0x7d,(byte)0xfa,(byte)0xef,(byte)0xc5,(byte)0x91,(byte)0x39,(byte)0x72,(byte)0xe4,(byte)0xd3,(byte)0xbd,(byte)0x61,(byte)0xc2,(byte)0x9f,
        (byte)0x25,(byte)0x4a,(byte)0x94,(byte)0x33,(byte)0x66,(byte)0xcc,(byte)0x83,(byte)0x1d,(byte)0x3a,(byte)0x74,(byte)0xe8,(byte)0xcb,(byte)0x8d,(byte)0x01,(byte)0x02,(byte)0x04,
        (byte)0x08,(byte)0x10,(byte)0x20,(byte)0x40,(byte)0x80,(byte)0x1b,(byte)0x36,(byte)0x6c,(byte)0xd8,(byte)0xab,(byte)0x4d,(byte)0x9a,(byte)0x2f,(byte)0x5e,(byte)0xbc,(byte)0x63,
        (byte)0xc6,(byte)0x97,(byte)0x35,(byte)0x6a,(byte)0xd4,(byte)0xb3,(byte)0x7d,(byte)0xfa,(byte)0xef,(byte)0xc5,(byte)0x91,(byte)0x39,(byte)0x72,(byte)0xe4,(byte)0xd3,(byte)0xbd,
        (byte)0x61,(byte)0xc2,(byte)0x9f,(byte)0x25,(byte)0x4a,(byte)0x94,(byte)0x33,(byte)0x66,(byte)0xcc,(byte)0x83,(byte)0x1d,(byte)0x3a,(byte)0x74,(byte)0xe8,(byte)0xcb,(byte)0x8d
    };

    public static byte[] Encrypt(byte[] message, byte[] key){
        byte[] output = new byte[message.length];
        int cycles = getCycleCount(key.length);
        if(cycles <= 0) return null;

        // Break message in to blocks
        byte[][] blocks = messageToBlocks(message);

        // Generate subkeys
        byte[][] keys = generateSubkeys(key,cycles);

        try {
            for(int i = 0; i < blocks.length; i++){
                byte[] tmp = blocks[i];
                for(int a = 0; a < cycles; a++){
                    //System.out.println("Cycling block="+ i +" round = " + (a+1) +" first="+(a==0) +" last=" + (a == cycles - 1));
                    tmp = encryptCycle(tmp,keys,a+1,(a == 0),(a == cycles - 1));
                }
                ArrayAppend(output, tmp, i * 16);
            }
            return output;

        }catch (Exception e){
            e.printStackTrace();
        }

        return null;
    }

    public static byte[] Decrypt(byte[] message, byte[] key){
        byte[] output = new byte[message.length];
        int cycles = getCycleCount(key.length);
        if(cycles <= 0) return null;

        // Break message in to blocks
        byte[][] blocks = messageToBlocks(message);

        // Generate subkeys
        byte[][] keys = generateSubkeys(key,cycles);

        try {
            for(int i = blocks.length - 1; i >= 0; i--){
                byte[] tmp = blocks[i];
                for(int a = 0; a < cycles; a++){
                    //System.out.println("Cycling block="+ i +" round = " + (a+1) +" first="+(a==0) +" last=" + (a == cycles - 1));
                    tmp = decryptCycle(tmp ,keys ,cycles - a, (a == 0), (a == cycles - 1));
                }
                ArrayAppend(output, tmp, i * 16);
            }
            return output;
        }catch (Exception e){
            e.printStackTrace();
        }
        return null;
    }

    private static byte[] encryptCycle(byte[] part, byte[][] keys, int keyIndex,boolean first, boolean last) throws Exception {

        // AddRoundKey
        if(first) part = Cryptography.xor(part, keys[0]);

        // SubBytes
        part = subBytes(part);

        //ShiftRows
        part = shiftRows(part);

        //MixColumns
        if(!last) part = mixCols(part);

        //AddRoundKey
        part = Cryptography.xor(part,keys[keyIndex]);

        return part;
    }

    private static byte[] decryptCycle(byte[] part, byte[][] keys, int keyIndex,boolean first, boolean last){

        // Key addition layer
        part = Cryptography.xor(part,keys[keyIndex]);

        // Inverse mix cols layer
        if(!first) part = inverseMixCols(part);

        // Inverse shift rows layer
        part = inverseShiftRows(part);

        // Inverse sub bytes
        part = inverseSubBytes(part);

        // last key addition
        if(last) part = Cryptography.xor(part,keys[0]);

        return part;
    }

    private static byte[] subBytes(byte[] message){
        for(int i = 0; i < message.length; i++){
            message[i] = s[message[i] & 0xFF]; // these are signed values
        }
        return message;
    }

    private static byte[] inverseSubBytes(byte[] message){
        for(int i = 0; i < message.length; i++){
            message[i] = inv_s[message[i] & 0xFF]; // these are signed values
        }
        return message;
    }

    private static byte[] shiftRows(byte[] message){
        byte[] tmp = new byte[16];
        tmp[0] =  message[0];
        tmp[1] =  message[5];
        tmp[2] =  message[10];
        tmp[3] =  message[15];
        tmp[4] =  message[4];
        tmp[5] =  message[9];
        tmp[6] =  message[14];
        tmp[7] =  message[3];
        tmp[8] =  message[8];
        tmp[9] =  message[13];
        tmp[10] = message[2];
        tmp[11] = message[7];
        tmp[12] = message[12];
        tmp[13] = message[1];
        tmp[14] = message[6];
        tmp[15] = message[11];
        return tmp;
    }

    private static byte[] inverseShiftRows(byte[] message){
        byte[] tmp = new byte[16];
        tmp[0] =  message[0];
        tmp[5] =  message[1];
        tmp[10] =  message[2];
        tmp[15] =  message[3];
        tmp[4] =  message[4];
        tmp[9] =  message[5];
        tmp[14] =  message[6];
        tmp[3] =  message[7];
        tmp[8] =  message[8];
        tmp[13] =  message[9];
        tmp[2] =  message[10];
        tmp[7] = message[11];
        tmp[12] = message[12];
        tmp[1] = message[13];
        tmp[6] = message[14];
        tmp[11] = message[15];
        return tmp;
    }

    /*
    02 03 01 01
    01 02 03 01
    01 01 02 03
    03 01 01 02
    */
    private static byte[] mixCols(byte[] message){
        byte[] tmp = new byte[16];
        int index = 0;
        for(int i = 0; i < 16; i+=4){
            tmp[index++] = (byte) (gm_2[message[i] & 0xFF] ^ gm_3[message[i+1] & 0xFF] ^ message[i+2] ^ message[i+3]);
            tmp[index++] = (byte) (message[i] ^ gm_2[message[i+1] & 0xFF] ^ gm_3[message[i+2]  & 0xFF] ^ message[i+3]);
            tmp[index++] = (byte) (message[i] ^ message[i+1] ^ gm_2[message[i+2] & 0xFF] ^ gm_3[message[i+3] & 0xFF]);
            tmp[index++] = (byte) (gm_3[message[i] & 0xFF] ^ message[i+1] ^ message[i+2] ^ gm_2[message[i+3] & 0xFF]);
        }
        return tmp;
    }

    /*
    14 11 13 09
    09 14 11 13
    13 09 14 11
    11 13 09 14
    */
    private static byte[] inverseMixCols(byte[] message){
        byte[] tmp = new byte[16];
        int index = 0;
        for(int i = 0; i < 16; i+=4){
            tmp[index++] = (byte) (gm_14[message[i] & 0xFF] ^ gm_11[message[i+1] & 0xFF] ^ gm_13[message[i+2] & 0xFF] ^ gm_9[message[i+3] & 0xFF]);
            tmp[index++] = (byte) (gm_9[message[i] & 0xFF] ^ gm_14[message[i+1] & 0xFF] ^ gm_11[message[i+2] & 0xFF] ^ gm_13[message[i+3] & 0xFF]);
            tmp[index++] = (byte) (gm_13[message[i] & 0xFF] ^ gm_9[message[i+1] & 0xFF] ^ gm_14[message[i+2] & 0xFF] ^ gm_11[message[i+3] & 0xFF]);
            tmp[index++] = (byte) (gm_11[message[i] & 0xFF] ^ gm_13[message[i+1] & 0xFF] ^ gm_9[message[i+2] & 0xFF] ^ gm_14[message[i+3] & 0xFF]);
        }
        return tmp;
    }


    /* HELPERS */

    private static byte[][] generateSubkeys(byte[] key, int cycles){

        // Generate subkeys
        byte[][] keys = new byte[cycles + 1][16];
        keys[0] = key;
        for(int i = 1; i < keys.length; i++){
            byte[] tmp = new byte[4];
            byte[] tmp2 = new byte[4];
            System.arraycopy(keys[i-1],12,tmp,0,4);
            System.arraycopy(keys[i-1],0,tmp2,0,4);
            tmp = Cryptography.xor(subBytes(Utils.ArrayCircularShiftLeft(tmp,1)),new byte[]{rcon[i],0x00,0x00,0x00});
            tmp = Cryptography.xor(tmp,tmp2);
            System.arraycopy(tmp,0,keys[i],0,4);

            System.arraycopy(keys[i-1],4,tmp2,0,4);
            tmp = Cryptography.xor(tmp,tmp2);
            System.arraycopy(tmp,0,keys[i],4,4);

            System.arraycopy(keys[i-1],8,tmp2,0,4);
            tmp = Cryptography.xor(tmp,tmp2);
            System.arraycopy(tmp,0,keys[i],8,4);

            System.arraycopy(keys[i-1],12,tmp2,0,4);
            tmp = Cryptography.xor(tmp,tmp2);
            System.arraycopy(tmp,0,keys[i],12,4);
        }

        return keys;
    }

    private static byte[][] messageToBlocks(byte[] message){
        byte[][] blocks = new byte[(int)Math.ceil(message.length/16)][16];
        for(int i = 0; i < blocks.length; i++){
            byte[] tmp = new byte[16];
            for(int a = 0; a < 16; a++)
                tmp[a] = message[i*16+a];
            blocks[i] = tmp;
        }
        return blocks;
    }

    private static int getCycleCount(int keySize){
        // 16 24 32
        // 10 12 14
        int cycles = 0;
        if(keySize == 16){
            cycles = 10;
        }else if(keySize == 24){
            cycles = 12;
        }else if(keySize == 32){
            cycles = 14;
        }else{
            System.out.println("Invalid key size. Was "+keySize+". Expected 16, 24 or 32.");
        }
        return cycles;
    }


}
